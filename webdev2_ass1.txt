// 1. Function to check if a number is odd and return a promise
function isOdd(number) {
    return new Promise((resolve, reject) => {
        if (number % 2 !== 0) {
            resolve(true); // Number is odd
        } else {
            reject(false); // Number is even
        }
    });
}

// Array of numbers
const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

// Iterate through the array with a for loop
for (let i = 0; i < numbers.length; i++) {
    const number = numbers[i];
    
    // Call isOdd function with the number
    isOdd(number)
        .then(result => {
            console.log(number + ' is odd.');
        })
        .catch(result => {
            // Do nothing if the number is even
        });
}




// 2. Function that returns a promise resolving with a random character after 500ms
function getRandomCharacter() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            const randomIndex = Math.floor(Math.random() * characters.length);
            const randomCharacter = characters[randomIndex];
            resolve(randomCharacter);
        }, 500);
    });
}

// Asynchronous function to invoke getRandomCharacter and print the random character
async function printRandomCharacter() {
    try {
        const randomCharacter = await getRandomCharacter();
        console.log('Random character:', randomCharacter);
    } catch (error) {
        console.error('Error occurred:', error);
    }
}

// Invoking the asynchronous function
printRandomCharacter();



//3. Function that returns a promise rejecting with a random value after 500ms
function getData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const randomValue = Math.random();
            reject(randomValue);
        }, 500);
    });
}

// Asynchronous function to invoke getData and handle the rejection
async function handleRejectedData() {
    try {
        await getData();
    } catch (error) {
        console.error('Rejected with value:', error);
    }
}

// Invoking the asynchronous function
handleRejectedData();




// 4. Function that returns a promise rejecting and resolving after 500ms
function rejectResolve() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const randomValue = Math.random();
            reject(randomValue); // Reject with a random value
        }, 500);
        setTimeout(() => {
            const randomValue = Math.random();
            resolve(randomValue); // Resolve with another random value
        }, 1000);
    });
}

// Asynchronous function to invoke rejectResolve and handle both rejection and resolution
async function handleRejectResolve() {
    try {
        const rejectedValue = await rejectResolve();
        console.log('Resolved with value:', rejectedValue);
    } catch (error) {
        console.error('Rejected with value:', error);
    }
}

// Invoking the asynchronous function
handleRejectResolve();


